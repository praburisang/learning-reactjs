CHAPTER 1 - The Basics
    > basic react syntax
        React.createElement = create react element
        ReactDOM.render = render react element

    > NESTED ELEMENT = u can write element content/children in the 3rd parameter and so on
        example : const element = react.createElement{ul,null, react.createElement('li',null,'apple')}

    > introduce JSX & Babel
        JSX =   -html like syntax
                -dont need to write in string or duble tick
                -not a standard JS
                -need a compiler
        babel = -javascript compiler
                -transform nextgen JS to browser compatible JS
                -transform non standard JS to standard JS
                -for development purpose we can use babel standalone that compile the JS code in browser
                -use pre compile if u want to use it in production

    > how does babel work?
        babel use various type of plugin to transform into standard JS
        when using empty element dont forget to put subclosing(/)

    > react component
        JS function that return to react/jsx element using uppercase in first letter

    > how react render to DOM tree?
        only update the element that change

CHAPTER 2 - The Essentials
    > install Essentials
        -nodejs
        -npm
        -yarn
        -initialize : yarn init -y

    > setup local babel for precompile
        - install babel package
            ~ yarn add @babel/core @babel/cli @babel/preset-react
                . @babel/core : core function / internal api babel
                . @babel/cli : use for compile process
                . @babel/preset-react : preset to transform react JS to standard JS
            ~ add this code to package.json
                "scripts": {
                    "build" :"babel src --out-dir public"
                }
            ~ create babel config and insert preset that will be used(preset-react)
                {
                    "presets": [
                        "@babel/preset-react"
                    ]
                }
        - install http-server(lite-server) *to surf static file
            ~ yarn add lite-server
            ~ add this code to scripts in package.json
        - add automatic build and start in package.json *for learning only 
            ~ add -w to build 
            ~ replace start script to serve script 
            ~ add start script
                yarn build & yarn start
    
    > basic style react element(inline)
        - react cant read style = "..."
        - we need to convert it to JS object using {{}}
        - replace ; to , in inline style
        - value need to be string using '..'
        - if there's two word using - replace it using camelcase (backgroundColor)
        - if using pixel no need to be string and remove px

    > external styling in react
        - just as the same as usual
        - replace class to className 

    > event handling
        - use onClick instead of onclick
        - use {...} instead of "..."
        - dont use () if referencing a function *it'll call as the webpage is loaded
        - if using a parameter, we can invoke it on another function / use .bind
    
    > component & state (state hooks)
        - syntax : React.useState(value)
        - this syntax is an array of [value, dispatchAction()]
        - since state is an array we can use destructuring in variable name example [count, setState]
    
    > component lifecycle
        - if we want to access element using standard JS in react it can only be access after code is rendered
        - but if theres a delay theres a possibility that it'll return null
        - it will be run again when element re render
        - for watching a function wecan use useEffect
        - if we only want to execute on the first render, we can use empty array [] in 2nd argument of useEffect
    
    > conditional rendering
        - when a condition is fulfilled itll render a component
    
    > DOM manipulation
        - in react we can use useRef for DOM manipulation
        - bind ref={variable name} in element that'll be manipulated
    
    > React hooks
        - bringing react feature like state management in a class component into function component
        - like useState()

    > List & Keys
        - we can use array to create a List
        - using .map function. example :
            fruits = [apple, orange];
            return (
                <ul>
                    fruits.map(function(fruit){
                        return <li>{fruit}</li>
                    })
                </ul>
            )
        - why not forEach? because forEach doesnt support return
        - if not using key react will return an error
        - key must be unique

    > Forms
        - uncontrolled
            ~ using vanilla js on its core
            ~ default behaviour of form is to navigate to another page
            ~ so if we want to get the value of a form it will disapear
            ~ we can remove default behaviour using parameter.preventDefault
            ~ wecan get value of a form using getElementbyId or useRef
        - controlled
            ~ using useState to get value of input
            ~ using onChange on input field to listen value
            ~ parameter.target.value on onChange
            ~ value on input field set to first array of useState so it could only depend on state